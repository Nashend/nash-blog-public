@page "/admin/manage-blog-posts"
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject NavigationManager NavigationManager
@inject IBlogPostsAdminService BlogPostsService

@using NashBlog.Data.Entities
@using Microsoft.AspNetCore.Components.QuickGrid

<PageTitle>@Utils.GetPageTitle("Manage Blog Posts")</PageTitle>

<AdminHeader Title="Manage Blog Posts">
    <ActionButtons>
        <a href="admin/manage-blog-posts/new" class="btn btn-sm btn-primary" data-enhance-nav="false">+ Add New Blog Post</a>
    </ActionButtons>
</AdminHeader>

@if (_isLoading)
{
    <Loader LoaderText="@_loadingText" />
}


<QuickGrid ItemsProvider="@_blogPostsProvider" Pagination="@_paginationState" class="table table-bordered table-striped table-hover">
    <PropertyColumn Property="@(b => b.Id)" />
    <TemplateColumn Title="Post">
        <div class="py-2" style="display: grid; grid-template-columns: 60px auto; grid-column-gap: 5px;">
            <img src="@context.Image" style="height: 60px; width: 60px; object-fit: cover;" />
            <div>
                <label class="mb-0 d-block font-weight-bold">@context.Title</label>
                @if(context.IsPublished)
                {
                    <a href="posts/@context.Slug" target="_blank">@context.Slug</a>
                }
                else
                {
                    <label>@context.Slug</label>
                }
            </div>
        </div>
    </TemplateColumn>
    <PropertyColumn Property="@(b => b.Category.Name)" Title="Category" />
    <TemplateColumn Title="Featured">
        @if (context.IsFeatured)
        {
            <label class="text-success">
                <input type="checkbox" @onchange="@(() => HandleFeatureChanged(context))" checked /> Yes
            </label>
        }
        else
        {
            <label class="text-danger">
                <input type="checkbox" @onchange="@(() => HandleFeatureChanged(context))" /> No
            </label>
        }
    </TemplateColumn>
    <TemplateColumn Title="Published">
        @if (context.IsPublished)
        {
            <label class="text-success">
                <input type="checkbox" @onchange="@(() => HandlePublishedChanged(context))" checked /> Yes
            </label>
        }
        else
        {
            <label class="text-danger">
                <input type="checkbox" @onchange="@(() => HandlePublishedChanged(context))" /> No
            </label>
        }
    </TemplateColumn>
    <TemplateColumn Title="Action">
        <a href="admin/manage-blog-posts/edit/@context.Id" class="btn btn-sm btn-primary" data-enhance-nav="false">Edit</a>
    </TemplateColumn>
</QuickGrid>

<Paginator State="@_paginationState" />

<style type="text/css">
    .table > tbody > tr > td {
        vertical-align: middle;
        text-align: center;
    }
    .table > thead > tr > th {
        text-align: center;
        margin: auto;
    }
</style>

@code {
    private bool _isLoading;
    private string? _loadingText;

    private GridItemsProvider<BlogPost> _blogPostsProvider;
    private const int PAGE_SIZE = 10;

    private PaginationState _paginationState = new PaginationState { ItemsPerPage = PAGE_SIZE };

    protected override async Task OnInitializedAsync()
    {
        _blogPostsProvider = async request =>
        {
            _isLoading = true;
            _loadingText = "Fetching blog posts...";
            StateHasChanged(); // forced to tell Blazor that state has changed because this function is outside the context of Blazor

            var pagedBlogs = await BlogPostsService.GetBlogPostsAsync(request.StartIndex, request.Count ?? PAGE_SIZE);

            _isLoading = false;
            StateHasChanged();

            return GridItemsProviderResult.From(pagedBlogs.Records, pagedBlogs.TotalCount);
        };
    }

    private async Task HandleFeatureChanged(BlogPost blogPost)
    {
        blogPost.IsFeatured = !blogPost.IsFeatured;
        await SaveChangesAsync(blogPost);
    }
    private async Task HandlePublishedChanged(BlogPost blogPost)
    {
        blogPost.IsPublished = !blogPost.IsPublished;
        await SaveChangesAsync(blogPost);
    }
    private async Task SaveChangesAsync(BlogPost blogPost)
    {
        _loadingText = "Saving changes...";
        _isLoading = true;
        await BlogPostsService.SaveBlogPostAsync(blogPost, "");
        _isLoading = false;
        NavigationManager.Refresh();
    }
}
